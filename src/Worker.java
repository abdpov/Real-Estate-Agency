import java.util.*;
import java.sql.*;

public class Worker extends RoleMenu{
    static Scanner scanner = new Scanner(System.in);
    private static final String DB_URL = "jdbc:sqlite:real_state_agency.db";
    public void showMenu(){
        while(true) {
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—É—á–µ–Ω–Ω—ã—Ö –º–Ω–µ –¥–µ–ª");
            System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞–¥, –∫–æ—Ç–æ—Ä—ã–º —è —Ä–∞–±–æ—Ç–∞—é");
            System.out.println("4. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É");
            System.out.println("5. –í—ã—Ö–æ–¥");
            int option = scanner.nextInt();

            if(option == 1){
                viewMyTasks(Main.currentUser);
            } else if (option == 2) {
                markTaskAsFinished();
            } else if (option == 3) {
                viewPActiveTasks(Main.currentUser);
            } else if (option == 4) {
                viewWorkerSalary();
            } else if (option == 5) {
                break;
            } else {
                System.out.println("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
            }
        }
    }

    private static void viewMyTasks(String username) {
        scanner.nextLine();
        String getTasksSQL = "SELECT task, status FROM tasks WHERE username = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement getTasksStmt = conn.prepareStatement(getTasksSQL)) {

            getTasksStmt.setString(1, username);
            ResultSet taskRs = getTasksStmt.executeQuery();

            System.out.println("\nüìù –í–∞—à–∏ –¥–µ–ª–∞:");
            boolean hasTasks = false;
            while (taskRs.next()) {
                String task = taskRs.getString("–¥–µ–ª–∞");
                String status = taskRs.getString("—Å—Ç–∞—Ç—É—Å");
                System.out.println("- " + task + " [" + status + "]");
                hasTasks = true;
            }

            if (!hasTasks) {
                System.out.println("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.");
            }

        } catch (SQLException e) {
            System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private static void markTaskAsFinished() {
        String getTasksSQL = "SELECT id, task, status FROM tasks WHERE username = ?";
        String updateTaskSQL = "UPDATE tasks SET status = 'finished' WHERE id = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement getTasksStmt = conn.prepareStatement(getTasksSQL)) {

            getTasksStmt.setString(1, Main.currentUser);
            ResultSet rs = getTasksStmt.executeQuery();

            List<Integer> taskIds = new ArrayList<>();
            System.out.println("\nüìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:");
            int index = 1;
            while (rs.next()) {
                int taskId = rs.getInt("id");
                String task = rs.getString("–∑–∞–¥–∞—á–∏");
                String status = rs.getString("—Å—Ç–∞—Ç—É—Å");
                System.out.println(index + ". " + task + " [" + status + "]");
                taskIds.add(taskId);
                index++;
            }

            if (taskIds.isEmpty()) {
                System.out.println("üì≠ –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.");
                return;
            }

            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            if (choice < 1 || choice > taskIds.size()) {
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
                return;
            }

            int selectedTaskId = taskIds.get(choice - 1);

            try (PreparedStatement updateStmt = conn.prepareStatement(updateTaskSQL)) {
                updateStmt.setInt(1, selectedTaskId);
                updateStmt.executeUpdate();
                System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è!");
            }

        } catch (SQLException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: " + e.getMessage());
        } catch (InputMismatchException e) {
            System.out.println("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.");
            scanner.nextLine(); // clear invalid input
        }
    }
    private static void viewPActiveTasks(String username) {
        String getTasksSQL = "SELECT task FROM tasks WHERE username = ? AND status = 'assigned'";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement getTasksStmt = conn.prepareStatement(getTasksSQL)) {

            getTasksStmt.setString(1, username);
            ResultSet taskRs = getTasksStmt.executeQuery();

            System.out.println("\nüìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:");
            boolean hasTasks = false;
            while (taskRs.next()) {
                String task = taskRs.getString("–∑–∞–¥–∞—á–∞");
                System.out.println("- " + task);
                hasTasks = true;
            }

            if (!hasTasks) {
                System.out.println("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!");
            }

        } catch (SQLException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: " + e.getMessage());
        }
    }
    private static void viewWorkerSalary() {
        scanner.nextLine(); // clear leftover newline


        String username = Main.currentUser;

        String sql = "SELECT role, salary FROM users WHERE username = ?";

        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                String role = rs.getString("—Ä–æ–ª—å");
                double salary = rs.getDouble("–∑–∞—Ä–ø–ª–∞—Ç–∞");

                if (!role.equalsIgnoreCase("—Å–æ—Ç—Ä—É–¥–Ω–∏–∫")) {
                    System.out.println("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º");
                    return;
                }

                System.out.printf("üí∞ –≤–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: %.2f\n", salary);
            } else {
                System.out.println("‚ùå –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }

        } catch (SQLException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã: " + e.getMessage());
        }
    }
}
